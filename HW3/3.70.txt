Name: Masataka Mori


Problem3.70:
Consider the following union declaration

union ele {
	struct {
		long *p;
		long y;
	} e1
	sturct {
		long x;
		union ele *next;
	} e2;
};

The declaration illustrates that structures can be
embedded within unions.
	The following function(with some expression emitted) oprates on a linked
	list having these unios as list elements:

void proc (union ele *up) {
	up->??????????? = *(?????????) - ?????????;
}


A. What are the offsets (in bytes) of the following fields:
Ans:
	e1.p: +0
	e1.y: +8
	e2.x: +0
	e2.next: +8


B. How many total bytes deos the structure require?
Ans:
	struct e1 require 16 bytes total
	strcut e2 require 16 bytes total

	so the union ele require 16 bytes total

C. The compiler generates the following assembly code for proc:

	void proc(union ele*up)
	up in %rdi
Proc:
1	movq 8(%rdi), %rax  // rax = 8+rdi = can be y or next
2	movq (%rax), %rdx   // rdx = M[R[%rax]] 
3	movq (%rdx), %rdx   // rdx = M[R[rdx]]
4	subq 8(%rax), %rdx  // rdx = rdx - 8(%rax)
5	movq %rdx, (%rdi)   // (%rdi) = rdx - 8(%rax)
6	ret

On the basis of this information, fill in the missing expressions in the code
for proc. Hint: Some union reference can have ambiguous interpretations.
These ambiguities get resolved as you see where the references lead.
There is only one answer that doesn't perform any casting and does not
violate any type constraints.

Ans:
	First,  observing at line 4
	they subtract %rdx from 8(%rax)
	and sicne there is no casting 
	%rdx must have pointer variable,
	and 8(%rax) must have long size variable
	
	Let me focus on 8(%rax) 
	at line 1, %rax is stored something by offset +8 %rdi
	so it must be long y,or unione ele*next
	since it is used as 8(%rax), in the subtraction
	it is union ele *next
	therfore
	%rax = e2.next
	and since 8(%rax) must be long variable
	8(%rax) = e2.next->e1.y;

	Next let me focus on %rdx
	at line 2, rdx has (%rax)
	which must be either e2.next->e1.p or e2.next->e2.x
	since its offset is zero
	at line 2 rdx is used as mermory access, so it must be pointer p
	so rdx = *(e2.next->eq.p)

	Now, we are done with subtraction.
	In the end, line 5
	the result of subtraction is stored in (%rdi)
	which means it is used having offset 0
	to store the long size variable it must be
	e2.x
	if long *p we need to have deference.

	Therefore, the answer is

	void proc (union ele *up) {
		up->e2.x = *(up->e2.next->e1.p) - up->e2.next->e1.y;
	}



