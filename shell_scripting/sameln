#!/bin/bash

## Set IFS as new line charcters
## by doing this we can separate the fields in
## environmental variable we use soon(ex. dot_file_list)
## so that we can treat each file as one element and
## takes care the file names containing 'space'
IFS=$'\n'
## take the first argument, which is directory name.
target_directory=$1
#echo $target_directory

## get files starting with '.', and store into "shell variable"
## note that ls outputs the alphabetically sorted result
## option -A exclude the file . and ..
## it includes irregular files like directory
dot_files_list=`ls -A $target_directory | grep '^\.'`


## get files not starting with '.', and store into "shell variable"
## again, it's sorted alphabetically because of ls
undot_files_list=`ls $target_directory`

## Shell variables which will contain only valid files in
## in order which is specified by assignment
TARGET_FILES=""
# index for TARGET_FILES
index=0



## for test
#set | grep dot_files_list
#set | grep undot_files_list

## Extract only readable regular files in dot_files array
## and add them into TARGET_FILES
for dot_file in $dot_files_list
do
    ## -f : if it is a regular file 
    ## -r : if it is readable
    if [ ! -r "$target_directory/$dot_file" ]
    then
		echo "$dot_file is not readable"
	
    else
		## -f : if it is a regular file
		## -L : if it is a sym link ( use ! in this case)
		if [ -f "$target_directory/$dot_file" ] &&
			   [ ! -L "$target_directory/$dot_file" ]
		then
			## store to temporary shell variable if readable and regular file
			if [ $index -eq 0 ]
			then
				TARGET_FILES="$target_directory/$dot_file"
			else
				TARGET_FILES=$TARGET_FILES:"$target_directory/$dot_file"
			fi

			# ++ isnot posix
			index=$(($index+1))
		fi
    fi
done

##test
#set | grep TARGET_FILES


## Extract only readable regular files in undot_files array
## and append them into TARGET_FILES
for undot_file in $undot_files_list
do
    ## -f : if it is a regular file 
    ## -r : if it is readable
    if [ ! -r "$target_directory/$undot_file" ]
    then
		echo "$undot_file is not readable"
    else
		## -f : if it is a regular file
		## -L : if it is a sym link ( use ! in this case)
		if [ -f "$target_directory/$undot_file" ] &&
			   [ ! -L "$target_directory/$undot_file" ]
		then
			## store if readable and regular file
			TARGET_FILES=$TARGET_FILES:"$target_directory/$undot_file"
			index=$(($index+1))
		fi
    fi
done

##test
#set | grep TARGET_FILES
#echo "$index"

## Now need to compare each file in TARGET_FILES
## if same, hard link to the smaller index
## (since it is already sorted )
## counters
outer_loop_counter=0
inner_loop_counter=0
itself_file=0
## -lt : less than
## Now, each field is saparated by colon
## so reset the IFS to :
IFS=$':' 
for current_file in $TARGET_FILES
do
    itself_file=$(($itself_file+1))
    inner_loop_counter=0
    for next_file in $TARGET_FILES
    do
		## how not to compare myself and already compared files
		if [ $inner_loop_counter -gt $outer_loop_counter ]
		then
			# echo "Compareing $current_file : $next_file"
			## if they are duplicate, return value is 0.
			## $? : special variable which has exit status
			## of the last command executed. 
			cmp -s $current_file $next_file
			if [ $? -eq 0 ]
			then
				#echo "$current_file and $next_file are the same!!"
       			## -f : Force existing destination pathnames to be
				## removed to allow the link
				ln -f $current_file $next_file
			fi
	    
		fi

		inner_loop_counter=$(($inner_loop_counter+1))
    done

    outer_loop_counter=$(($outer_loop_counter+1))
done

