
Name: Masataka Mori

1.Explain why the instructions in the trace did not produce the correct mathematical result. 
  Which instructions caused the problem, exactly?
	
	Correct Result should be = -2305843009802285360 = 1101111111111111111111111111111111011100111010101100111011010000

	There are two imul instruction in trace.tr, let me examine one by one to find the mistake
1st
	544e50  49 0f af fc imul %r12 %rdi  rdi=4a85d2d0 rip=544e54  (line 71)
	first need to find out what really rdi have from previous insts
		rdi:
			The most recent mov instruction on rdi is at line 51, which does
			rdi = (%r15,%r13,8)
				at this point, r13 = 0
							   r15 = rdx = 3rd argu = Lisp_Object *args
			so rdi = Lisp_Object *args = 12a174b42 = 5001136962u
			at line 65,
			they operate arithmetic right shift by 2
			rdi = 0x12a172b42 >> 2 = 4a85d2d0 = 1250284240     (OUR ORIGINAL FIRST ARGUMENT!!!!!)

		r12:
			The most recent instruction operate on r12 is at line 38
			r12 = 1

	Therefore, at first multiplication machine does
	1250284240 * 1 =  1250284240 = rdi

2nd
	544e50  49 0f af fc imul %r12 %rdi  rdi=dfffffffdceaced0 rip=544e54 (line 106)
	let me examine rdi and r12

		rdi:
			the most recent mov inst on rdi is at line 86, which does
			rdi = (%r15,%r13,8) 
				at this point, r13 = 1
							   r15 = rdx = 3rd arg = Lisp_Object *args
			so rdi = Lisp_Object *args + 1*8 = fffffffe484b9b06 = 18446744066332531462u
			then, at line 100,
			machine operate arithmetic right shift by 2 on rdi
			rdi = fffffffe484b9b06 >> 2 = ffffffff9212e6c1 = 18446744071865296577u
														   = -1844255039   (OUR ORIGINAL SECOND ARGUMENT!!!!!)
		r12:
			the  most resent mov inst on r12 is at line 73, which does
			r12 = rdi = 4a85d2d0 = 1250284240 (result from 1st imul result!!!)
	
	Therefore, at second first multiplication, machine does
	rdi = 1250284240 * -1844255039, as we wanted to know as the test!!
		= dfffffffdceaced0     
		= 1101111111111111111111111111111111011100111010101100111011010000

	the correct result  = 1101111111111111111111111111111111011100111010101100111011010000
					rdi = 1101111111111111111111111111111111011100111010101100111011010000

			WE HAVE CORRECT RESULT NOW!!

	Now, let's see what will happen to rdi after the above multiplication
	at line 108,
		r12 = rdi
			= correct answer
	then, track the r12
	and at line 115,
	544dfc  4a 8d 04 a5 02 00 00 00 lea 0x2(,%r12,4) %rax   rax=7fffffff73ab3b42 rip=544dfc 

		this is the most recent instrution on rax before ret instruction, so the return value
		must be decided at this point. Let's examine this insturction
		r12 = correct answer = dfffffffdceaced0 = 1101111111111111111111111111111111011100111010101100111011010000
		and we mulitiply this by 4, which is same as
		shifting left by 2
		r12 << 2 = 01111111111111111111111111111111011100111010101100111011010000
		and add 0x2, which is 0010
		r12 + 2  = 01111111111111111111111111111111011100111010101100111011010010
		therefore
		rax = 01111111111111111111111111111111011100111010101100111011010010
			= 7fffffff73ab3b42
			!= dfffffffdceaced0
		which have different answer now!!!

	Before we conclude that above line leads the wrong answer, let me examine about arithmetic shift going on
	in the above.
	Before, the machine operates the imul, they operates >> 2 on Lisp_Object *args to get our original numbers
	used in multiplication. Why they do that?
	This operation is corresponding to
	XSET function in lisp.h (detail in pexexlab.txt)
	this function convert the Lisp_Object to integer value!
	Meaning, Lisp_Object always have left shifted original value by 2
	so to get back intger to do correct calculation, we need to operate 
	arithmetic right shift by 2 like above.

	Then, now we can explain why the machine operate
		lea 0x2(,%r12,4) %rax   rax=7fffffff73ab3b42 rip=544dfc
	, which leads the wrong answer.
	Since the code want to store the result as Lisp_Object again
	they operated the left shift by 2, which means conver the intger type
	to Lisp_Object type or I shoud say EMACS_INT(detailed explanation in pexex.lab)
	The reaseon why they add 2 is they use the least two bits created by left shift 
	as tag, which indicate what kind of datatype it had originally
	by looking at line 418 in lisp.h, where define Lisp_Type
	2
	indicate the datatype was integer type orginally, so that
	when we use the List_Object in calculatation, the machine need to 
	covert back to integer datatype by arithmetic shift like we saw in above.

	However, as we can imagine when they print the obtained return value rax,
	they convert that back to integer datatype since the returned value rax above
	has now Lisp_Object(EMACS_INT) to print the correct integer datatype.
	We can see they are acually doing it by looking at print.c(I couldn't find by looking at trace.tr)
	at line 501 in print.c
	printchar (XINT (character), printcharfun); 
	and we know XINT does the arithmetic rightshift by 2 on Lisp_Object(EMACS_INT)
	
	Concluding what happened to rdi(or r12 before lea) when it had the correct solution,
	result = rdi = r12 = dfffffffdceaced0 = 1101111111111111111111111111111111011100111010101100111011010000
when return rax
	shift left by 2 and and 2
	result = rax = dfffffffdceaced2 = 01111111111111111111111111111111011100111010101100111011010010
and before print do XINT(arithmetic right shift by 2)
	result = 01111111111111111111111111111111011100111010101100111011010010 >> 2
		   = 00011111111111111111111111111111110111001110101011001110110100
the correct result
should be  = 1101111111111111111111111111111111011100111010101100111011010000

	NOTICE that we lost the most two significant bit information!!!
	Therefore, the instruction which leads the wrong answer is
	544dfc  4a 8d 04 a5 02 00 00 00 lea 0x2(,%r12,4) %rax   rax=7fffffff73ab3b42 rip=544dfc
	also,
	the arithmetic right shift by 2 operation occuring when print the value!!!



================================================================================================================================================  

2.Explain why the shell command emacs -Q -batch -eval '(print most-negative-fixnum)' outputs -2305843009213693952.
  Where did the number come from? Explain in terms of the Emacs source code.
In source file data.c, there are codes
		DEFVAR_LISP ("most-negative-fixnum", Vmost_negative_fixnum,
				doc: /* The smallest value that is representable in a Lisp integer.  */);
				Vmost_negative_fixnum = make_number (MOST_NEGATIVE_FIXNUM);
				XSYMBOL (intern_c_string ("most-negative-fixnum"))->constant = 1;
	
	MOST_NEGATIVE_FIXNUM can be found by refernceing lisp.h,
		#define MOST_POSITIVE_FIXNUM (EMACS_INT_MAX >> INTTYPEBITS)
		#define MOST_NEGATIVE_FIXNUM (-1 - MOST_POSITIVE_FIXNUM)

			where EMACS_INT_MAX - maximum value of EMACS_INT; can be used in #if, around line 71
								which has whether INT_MAX, LONG_MAX, LLONG_MAX
				  INTTYPEBITS   - Number of bits in a Lisp fixnum tag, around line 234, defined as member of enum
								which has  GCTYPEBITS - 1
									where GCTYPEBITS = 3
	
	We have
		MOST_POSITIVE_FIXNUM = LONG_MAX >> 2
							 = 0x7fffffffffffffff >> 2
							 = 0x1fffffffffffffff
							 = 2305843009213693951
		MOST_NEGATIVE_FIXNUM = -1 - 2305843009213693951
							 = -2305843009213693952
	Therefore, we get number -2305843009213693952 as the smallest value representable
				in a Lisp integer.
================================================================================================================================

3.Explain why the shell command emacs -Q -batch -eval R_LISP ("most-negative-fixnum", Vmost_negative_fixnum,
  '(print (* most-positive-fixnum most-positive-fixnum most-positive-fixnum most-positive-fixnum))' outputs only 1.
	
===Correspoding work in pexexlab.txt starting at line198===
	
	Let's see what is going on about these calculation by looking at insturction and registers.
	I already write the detail instructions in pexexlab.txt, so I'll just use them.
	As always they first multiply the first argument in our original emacs command arguments
	0x1fffffffffffffff*1 = 0x1fffffffffffffff
	After this we do actual calculation, which we wanted machine to do
	0x1ffffffffffffff*0x1ffffffffffffff = 0xc000000000000001
	Obviously we can see overflow and tracating excess bit is happeped
	we can check that by seeing
	seto   %al	al = 1
	it has one, so it really overflowed
	Next,
	0xc000000000000001 * 0x1ffffffffffffff =  0x5fffffffffffffff
	Obiously, it overflowed and checking al like above, al has 1.
	Last multiplication,
	0x5fffffffffffffff * 0x1ffffffffffffff =  0x8000000000000001
	Also, obviously, it overflowed, also al has 1.
	now
	rdi = 0x8000000000000001

	After that, like I explained in part 1, machiene does
	mov    %rdi,%r12  r12 = 0x8000000000000001
	lea    0x2(,%r12,4),%rax    rax = 0x6
	to obtain the Lisp_Object int(EMACS_INT), and we get
	rax = 0x6
		= 00000100 (ignore the above 7bytes since all 0s)
	
	Then, like I explained in above, when they print the acutal integer value
	they operate the arithmetic right shift by 2 to convert from EMACS_INT to integer,
	which gives
	result = 00000100 >> 2
		   = 00000001


	Therefore, we got 1!!

================================================================================================================================================

4.The Emacs executable was compiled with GCC's -O2 option. Suppose it had also been compiled with -fwrapv. 
  Explain any problems Emacs would run into, or if there would not be a problem explain why not.

  When we do the lab with
  gdb --args ~eggert/bin64/bin/emacs-25.2 -batch -eval '(print (* 1250284240 -1844255039))'
  or above
  gdb --args ~eggert/bin64/bin/emacs-25.2 -batch -eval '(print (* most-positive-fixnum most-positive-fixnum most-positive-fixnum most-positive-fixnum))'
  we found the seto %al after imal, which set the 1 when there is a overflow after we operate the multiplication
  However, if we use -fwrapv, it wraps around the value to fit in the datatype when we operate the multiplication,
  so whenever there is overflow, and it makes seto %al have always 0 even when there is a overflow. 
  In data.c code from line 2663,
  they store the arithmetic operation result into ok_args, and ok_accum whenever there is no overflow occured.
  However, if we -fwrapv, like I explained in above, it always overflow = 0, and indciate the there is no
  overflow occured, so they store the calcualtion result into ok_args and ok_accum even though overflow occured.
  
=======================================================================================================================================================

5.There is a recently-discovered security vulnerability in Emacs 25.2, which you can exercise by running 
  emacs -Q -batch -eval '(print (format-time-string "%Y-%m-%d %H:%M:%S %Z" nil (concat (make-string 1000 ?X) "0")))'. 
  Briefly describe the bug's low-level manifestation by crashing Emacs, using GDB's backtrace command, 
  and following up with any other GDB commands that you think might be of interest.
 ===Correspoding work in pexexlab.txt starting at line 256===

	Other emacs commands that crash the emacs! 
	By looking at the pexexlab.txt, with some trials, I reached conclusion with this
	whenever the last argument has not alphabetic characters such as numbers, ., +, "?",
	it crash the EMACS.
	ex:
		 emacs -Q -batch -eval '(print (format-time-string "%Y-%m-%d %H:%M:%S %Z" nil (concat (make-string 1000 ?X) ".")))'
		 emacs -Q -batch -eval '(print (format-time-string "%Y-%m-%d %H:%M:%S %Z" nil (concat (make-string 1000 ?X) "adjfhajsdh??fhdsfjahfahfadfsaf"))
		 it including ??
		 emacs -Q -batch -eval '(print (format-time-string "%Y-%m-%d %H:%M:%S %Z" nil (concat (make-string 1000 ?X) "?")))'

		 ---> they gave me the same error as above
		 	but they don't give any error when the last argument is only alphabets!!(detain in pexexlab.txt)
	
	By reading the GDB's backtrace, it gives us the error(all backtrace in pexex.lab)
	#0  0x00007ffff16be55b in __strcpy_sse2_unaligned () from /lib64/libc.so.6
	and also since the emacs error gives me
	d 1 "emacs-25.2" received signal SIGSEGV, Segmentation fault.
	and before that occurs by keep tracking instruction, this was last
		  0x0000000000553241 <emacs_setenv_TZ+17>:	4c 8b 25 a8 b5 62 00	mov    0x62b5a8(%rip),%r12        # 0xb7e7f0 <tzvalbufsize.19776>
			(gdb) finish
			  Run till exit from #0  emacs_setenv_TZ (tzstring=0x1491249 'X' <repeats 200 times>...) at editfns.c:2404

		Thread 1 "emacs-25.2" received signal SIGSEGV, Segmentation fault.
		0x00007ffff16be55b in __strcpy_sse2_unaligned () from /lib64/libc.so.6
		=> 0x00007ffff16be55b <__strcpy_sse2_unaligned+411>:	f3 0f 7f 7f f0	movdqu %xmm7,-0x10(%rdi)



	So whenever we use the nonalpabetic charcter for the last argument in our emacs command,
	the machine will try to reach the  illegal memory location, so the segmentation error occurs.
		 	

 




