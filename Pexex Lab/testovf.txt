
Name: Masataka Mori

-O2
	xorl	%eax, %eax
	ret

This is very high level optimization,
and it operates xor itself, which means it always yields 
zero. So machine assume that there is no overflow
so most of time by adding somenumber itself,
it should be larger than original one.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-O2 -fwrapv
	movabsq	$9223372036854775807, %rax	// move absolute quad word(64bit) into rax	->rax=INT_MAX
	addq	%rdi, %rax		//rax += n
	cmpq	%rdi, %rax		//compare: rax+n - n
	setl	%al				//rax+n-n < 0 ---->set %al=1
	ret

	-fwrapv:instructs the compiler to assume that signed arithmetic overflow of addition,
			subtraction and multiplication wraps around using twos-complement representation
			(https://gcc.gnu.org/onlinedocs/gcc-4.1.2/gcc/Code-Gen-Options.html)
	
The instruction of these assembly code is exactly same operation
as the c code does.
Whenever, it overflows at line 2, it just wrap around to 64bits
and continue the computation and gives us result

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-O2 -fsanitize=undefined
	pushq	%rbp				//rsp=rsp-8, M[rsp-8]=rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	pushq	%rbx				//rsp=rsp-8, M[rsp-8]=rbx
	.cfi_def_cfa_offset 24
	.cfi_offset 3, -24
	movabsq	$9223372036854775807, %rdx	//rdx=INT_MAX
	movq	%rdi, %rbp					//rbp=n
	movq	%rdi, %rbx					//rbx=n
	subq	$8, %rsp					//rsp=rsp-8
	.cfi_def_cfa_offset 32
	addq	%rdx, %rbp					//rbp=n+INT_MAX
	jo	.L6								//jump if the previous inst sets the OF(overflowflag)	------LINE A		
.L2:
	cmpq	%rbx, %rbp					//compare: n+INT_MAX - n
	setl	%al							//if n+INT_MAX - n < 0, set 1
	addq	$8, %rsp					//rsp += 8
	.cfi_remember_state
	.cfi_def_cfa_offset 24
	popq	%rbx						//rbx=M[rsp], rsp-=8
	.cfi_def_cfa_offset 16
	popq	%rbp						//rbp=M[rsp], rsp-=8
	.cfi_def_cfa_offset 8
	ret									//return
.L6:
	.cfi_restore_state
	movq	%rdi, %rsi					//rsi=n
	movl	$.Lubsan_data0, %edi		//edi=Lubsan_data0
	call	__ubsan_handle_add_overflow // it is the function in lib/ubsan.c
	jmp	.L2


	-fsanitize=undefined: Enable UndefinedBehaviorSanitizer, a fast undefined behavior detector. 
						  Various computations are instrumented to detect undefined behavior at runtime.
						  (https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html) 

Due to the -fsanitize=undefined, the program check the overflow
by using jo at LINE A, it jumps to L6 if the previous addition n+INT_MAX 
overflow, and operate some instruction to deal with overflow. Then, 
go back to L2, and do the same operation as original C code.
If it doesn't overflow, it just goes to the L2, and do the
operation same as the original C code.


