Name: Masataka Mori

Homework: Learning to use Emacs

Prepare:
	To start, download a copy of the web page you're looking at into a file 
	named assign1.html. You can do this with Wget or curl. 
	Use cp to make three copies of this file. 
	Call the copies exer1.html, exer2.html, and exer3.html.

	>> wget https://web.cs.ucla.edu/classes/winter18/cs35L/assign/assign1.html
	
	>> cp assign1.html exer1.html
	>> cp assign1.html exer2.html
	>> cp assign1.html exer3.html


=================================================================================
Exercise 1.1: Moving around in Emacs
	
1. Use Emacs to edit the file exer1.html.
	
	>> e m a c s SP e x e r 1 . h t m l Enter

2. Move the cursor to just after the first occurrence of the word "HTML" 
   (all upper-case).

	>> C-s H T M L Enter

3. Now move the cursor to the start of the first later occurrence of 
   the word "scavenger".

   >> C-g        // to quit current command(Since I continue from above ProblemNo.2)
   >> C-s s c Enter
   >> M-b

4. Now move the cursor to the start of the first later occurrence 
   of the word "self-referential".

   >> C-s s e l f Enter
   >> M-b

5. Now move the cursor to the start of the first later occurrence of the word "arrow".

	>> C-s a r r o w Enter
	>> M-b

6. Now move the cursor to the end of the current line.
	
	>> C-e

7. Now move the cursor to the beginning of the current line.
	
	>> C-a

8. Doing the above tasks with the arrow keys takes many keystrokes, 
   or it involves holding down keys for a long time. Can you think of a way 
   to do it with fewer keystrokes by using some of the commands available in Emacs?

   Yes, like I did it above.
   I didn't use any arrow keys, but
   C-s : to search word and move the curser to there
   M-b : move to the begginng of current word
   C-e : move to the end of current line
   C-a : move to the begging of current line


9. Did you move the cursor using the arrow keys? If so, repeat the above steps,
   without using the arrow keys.

   No.

10. When you are done, exit Emacs.

	>> C-x C-c

======================================================================================
Exercise 1.2: Deleting text in Emacs

1. Use Emacs to edit the file exer2.html. The idea is to delete its HTML comments; 
   the resulting page should display the same text as the original.

   >> e m a c s SP e x e r 2 . h t m l Enter


2. Delete the 18th line, which is an HTML comment.
   <!-- HTML comments look like this. -->

	>> M-g M-g 1 8 Enter
	>> C-k
	>> C-x C-s         // to save


3. Delete the HTML comment containing the text "DELETE-ME DELETE-ME DELETE-ME".

	>> C-s D E Enter
	>> C-a
	>> C-k
	>> C-x C-s

4. Delete the HTML comment containing the text 
   "https://en.wikipedia.org/wiki/HTML_comment#Comments".

	>> C-s h t t p s : / / e n C-s Enter
	>> C-a
	>> C-p
	>> C-Shift-SP C-n C-n C-n Backspace  
			// Since it's mac, we need Shift for select region
	>> C-x C-s
	
5. There are three more HTML comments; delete them too.
	
	>> C-s < ! - Enter
	>> M-b M-f
	>> M-z >
	>> C-x C-s

	>> C-s M-p Enter Enter
	>> C-a
	>> C-Shift_SP C-n C-n C-n C-n Delete
	>> C-x C-s

	>> C-s M-p Enter Enter
	>> C-a
	>> C-k
	>> C-x C-s

	>> C-x C-c
	
	To check my work, in the shell command
	>> diff -u exer1.html exer2.html >exer2.diff

=====================================================================================
Exercise 1.3: Inserting text in Emacs

1. Use Emacs to edit the file exer3.html.

	>> e m a c s SP e x e r 3 . h t m l Enter


2. Change the first two instances of "Assignment 1" to "Assignment 51".

	>> C-s A s s Enter
	>> M-f M-f Delete 5 1
	>> C-s M-p C-s Enter
	>> M-f M-f Delete 5 1
	>> C-x C-s

3. Change the first instance of "UTF-8" to "US-ASCII".

	>> M-0 M-r       // move the cursor top of the screen
	>> C-s F - 8 Enter
	>> C-Shift-SP M-b M-b Delete
	>> U S - A S C I I
	>> C-x C-s
	Select coding system (default utf-8): 
	>> u t f - 8
	>> y e s


4. Insert an empty line after the first line containing "</ol>".

	>> C-s < / o
	>> C-e Enter
	>> C-x C-s
	Select coding system (default utf-8): 
	>> u t f - 8
	>> y e s



5. When you finish, save the text file and exit Emacs. As before, 
   use the diff command to check your work.

	I skipped the saving part since already done in above

	>> C-x C-c


	>> diff -u exer1.html exer3.html >exer3.diff

===================================================================================
Exercise 1.4: Other editing tasks in Emacs

1. Execute the command "cat exer2.html exer2.diff >exer4.html" to create a file 
   exer4.html that contains a copy of exer2.html followed by a copy of exer2.diff.

   >> cat exer2.html exer2.diff >exer4.html

2. Use Emacs to edit the file exer4.html. The idea is to edit the file so that 
   it looks identical to exer1.html on a browser, but the file itself is a little 
   bit different internally.

   >> e m a c s SP e x e r 4 . h t m l

3. Go to the end of the file. Copy the new lines in the last chunk of diff output,
   and paste them into the correct location earlier in the file.

   >> M->
   >> M-0 M-r
   >> C-s < ! Enter
   >> C-a C-f C-Shift-SP C-e
   >> M-w
   >> M-g M-g 1 8 Enter
   >> C-y
   

4. Repeat the process, until the earlier part of the file is identical to 
   what was in the original.
   
   >> M->
   >> M-0 M-r
   >> C-s < ! C-s Enter
   >> C-a C-f C-Shift-SP C-e
   >> M-w
   >> M-g M-g 1 1 1 Enter C-n C-n C-n
   >> C-y

   >> M->
   >> M-0 M-r
   >> C-s < ! C-s C-s Enter
   >> C-a C-f C-Shift-SP C-n C-n C-n
   >> M-w
   >> M-g M-g 3 2 1 Enter C-n C-n C-n
   >> C-y Delete C-p C-f Delete C-p C-f Delete  // to delete two extra '-'

   >> M->
   >> M-0 M-r
   >> C-s < ! C-s C-s C-s Enter
   >> C-b C-b C-Shift-SP C-f C-f C-f C-f C-f C-f C-f
   >> M-w
   >> M-g M-g 3 5 8 Enter C-n C-n C-n C-e C-b C-b C-b C-b C-b
   >> C-y

   >> M->
   >> M-0 M-r
   >> C-s < ! C-s C-s C-s C-s Enter
   >> C-a C-f C-Shift-SP C-n C-n C-n C-e
   >> M-w
   >> M-g M-g 3 5 8 Enter C-n C-n C-n C-n
   >> C-y
   // To delete extra '-'s
   >> C-a C-f Delete C-p C-f Delete C-p C-f Delete 
   
   >> M->
   >> M-0 M-r
   >> C-s < ! C-s C-s C-s C-s C-s Enter
   >> C-a C-f C-Shift-SP C-e
   >> M-w
   >> M-g M-g 3 7 7 Enter C-n C-n C-n
   >> C-y
   >> C-x C-s



5. Delete the last part of the file, which contains the diff output.o

	>> C-n C-a
	>> C-Shift-SP M-> Delete

6. â€¦ except we didn't really want to do that, so undo the deletion.

	>> C-x u

7. Turn the diff output into a comment, by surrounding it with "<!--" and "-->".

	>> - - >
	>> M-g M-g 3 7 7 Enter C-n C-n C-n C-n
	>> < ! - - Enter
	// I typed Enter so that I can distinguish with following "---"
	>> C-x C-s



8. Now let's try some search and replaces. Search the text document for the pattern 
   "<ol>". How many instances did you find? Use the search and replace function to 
   replace them all with the final-caps equivalent "<oL>".

   >> M-<
   >> M-x r e p l a c e - s t r i n g Enter
   >> < o l > Enter
   >> < o L > Enter
   , showed "Replaced 7 occurrences"
   >> C-x C-s
   >> C-x C-c

9. Check your work with viewing exer4.html with an HTML browser, and by running the 
   shell command "diff -u exer1.html exer4.html >exer4.diff". The only differences 
   should be changes from "<ol>" to "<oL>", and a long HTML comment at the end.

   >> diff -u exer1.html exer4.html > exer4.diff
   
   I checked the exer4.diff and it showed everything correctly as problem states.


=====================================================================================
Exercise 1.5: Doing commands in Emacs

1. Create a new directory named "junk" that's right under your home directory.

	>> e m a c s Enter
	>> M-x m k d i r Enter
	>> j u n k Enter


2. In that directory, create a C source file hello.c that contains the following text.
   Take care to get the text exactly right, with no trailing spaces or empty lines,
   with the initial # in the leftmost column of the first line, and with all other
   lines indented to match exactly as shown:
		#include <stdio.h>
		int
		main (void)
		{
		char n = '\n';
		char b = '\\';
		char q = '"';
		char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c 
		  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  
		  char const *p = %c%s%c;%c  
		  printf (p, n, n, n, n, b, n, b, b, n, q, n, 
		  q, p, q, n, n, n, n);%c  return 0;%c}%c";
		printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
		return 0;
		}

	>> C-x C-f junk/hello.c Enter

	Write the above codes into file

	>> C-x C-s

3. Compile this file, using the Emacs M-x compile command.

	>> M-x c o m p i l e
	>> Delete Delete Delete Delete Delete Delete Delete Delete
	>> gcc -o hello hello.c
	>> C-x o q  // to close new opened window


4. Run the compiled program, and put its output into a new Emacs buffer 
   named hello-out.

	>> M-x c o m p i l e
	>> Down         // type arrow down to eleminate previous command
	>> . / h e l l o
	>> C-x o       // move to new subwindow
	>> C-x C-w     // save as new file
	>> hello-out Enter

5. Copy this buffer's contents directly into the log that you're maintaining 
   for this exercise. 
   (You are using Emacs to maintain the log, aren't you?)

	From the newly opened window from previous problem
	>> C-Shift-SP M->
	>> M-x append-to-file Enter
	>> Delete Delete Delete Delete
	>> key1.txt Enter

============================moved to lnxsrv






































