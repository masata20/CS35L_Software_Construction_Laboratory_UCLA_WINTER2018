Problem: You are given the task of writing a fucntion that will copy and integer val into a buffer buf, but it should do so iff enough space is available at buffer.

----- Here is your code -----
/* Copy integer into buffer if space is available */
/* WARNING: The following code is buggy */

void copy_int(int val, void *buf, int maxbytes) {
	if (maxbytes-sizeof(val) >= 0)
		memcpy(buf, (void *) &val, sizeof(val));
}

	This code makes use of the library function memcpy. Although its use is a bit aritfical here, whre we simply want to copy an int, it illustrates and approach commonly used to copy larger data structures.
	You carefully test the code and discover that it always copies the value to the buffer, even when maxbytes is too small.


A. Explain why the conditional test in the code always succeeds. Hint: The sizeof operator returns a value of type size_t(unsigned integral type).

B. Show how you can rewrite the conditiaonl tst to make it work properly.


=============================== My Answer =========================================

A. When we do the arithmetic operation(subtraction in this case) between signed and unsigned integer.
	The machine change the signed to unsigned integer, and the result of arithmetic operation will come out as the unsigned data type. 
	Unsigned integer never be smaller than 0; therefore, the comparison always return true.

B. if (maxbytes >= sizeof(val))
